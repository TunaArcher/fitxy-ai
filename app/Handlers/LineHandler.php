<?php

namespace App\Handlers;

use App\Integrations\Line\LineClient;
use App\Libraries\ChatGPT;
use App\Models\AccountModel;
use App\Models\UserModel;
use App\Models\MenuModel;
use App\Models\MessageModel;
use App\Models\MessageRoomModel;

class LineHandler
{
    private AccountModel $accountModel;
    private UserModel $userModel;
    private MenuModel $menuModel;
    private MessageModel $messageModel;
    private MessageRoomModel $messageRoomModel;

    private $account;

    public function __construct()
    {
        $this->accountModel = new AccountModel();
        $this->userModel = new UserModel();
        $this->menuModel = new MenuModel();
        $this->messageModel = new MessageModel();
        $this->messageRoomModel = new MessageRoomModel();
    }

    public function handleWebhook($input)
    {
        $this->account = $this->accountModel->getAccountByID('128');

        if (getenv('CI_ENVIRONMENT') === 'development') $input = $this->getMockLineWebhookData();

        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Platform ‡∏ó‡∏µ‡πà Webhook ‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô Message ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°, ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û, ‡πÄ‡∏™‡∏µ‡∏¢‡∏á ‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£
        $message = $this->processMessage($input);

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
        $user = $this->userModel->getUserByUID($message['UID']);

        if ($user) {
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏™‡∏ô‡∏ó‡∏ô‡∏≤
            $messageRoom = $this->getOrCreateMessageRoom($user);

            // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
            $this->messageModel->insertMessage([
                'room_id' => $messageRoom->id,
                'send_by' => 'User',
                'sender_id' => $user->id,
                'message_type' => $message['type'],
                'message' => $message['content'],
                'is_context' => '1'
            ]);

            return [
                'UID' => $message['UID'],
                'message_room' => $messageRoom,
                'message_type' => $message['type']
            ];
        } else {

            $event = $input->events[0];
            $UID = $event->source->userId;

            $messages = [
                "‡∏Å‡πà‡∏≠‡∏ô‡∏à‡∏∞‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ö‡∏ú‡∏°‡∏ä‡πà‡∏ß‡∏¢ Unity X FitAI  ‡∏°‡∏≤‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏Å‡πà‡∏≠‡∏ô‡∏ô‡∏∞! ‡πÅ‡∏•‡πâ‡∏ß‡∏ú‡∏°‡∏à‡∏∞‡∏°‡∏µ‡πÅ‡∏£‡∏á ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏•‡∏¢‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà üëâ http://line.autoconx.app/",
                "‡∏≠‡∏¢‡∏≤‡∏Å‡πÉ‡∏´‡πâ‡∏ú‡∏° ‡∏ï‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö‡∏£‡∏π‡πâ‡πÉ‡∏à? ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏Å‡πà‡∏≠‡∏ô‡∏ô‡∏∞ üòÑ ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏á‡πà‡∏≤‡∏¢‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà üëâ http://line.autoconx.app/",
                "Unity X Unity X FitAI  ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏à‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡∏Ñ‡∏∏‡∏ì ‡πÅ‡∏ï‡πà‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡∏∑‡πà‡∏ô... ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏ñ‡∏≠‡∏∞! üòÜ ‡∏Å‡∏î‡πÄ‡∏•‡∏¢ üëâ http://line.autoconx.app/",
                "‡∏£‡∏π‡πâ‡∏°‡∏±‡πâ‡∏¢? ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÅ‡∏•‡πâ‡∏ß Unity X FitAI  ‡∏à‡∏∞‡∏â‡∏•‡∏≤‡∏î‡∏Ç‡∏∂‡πâ‡∏ô 10% (‡∏à‡∏≤‡∏Å‡πÑ‡∏´‡∏ô‡∏Å‡πá‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ ü§£) ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÄ‡∏•‡∏¢! üëâ http://line.autoconx.app/",
                "‡πÄ‡∏Æ‡πâ! ‡∏≠‡∏¢‡∏≤‡∏Å‡πÑ‡∏î‡πâ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏î‡∏µ‡πÜ ‡∏à‡∏≤‡∏Å Unity X FitAI  ‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏Å‡πà‡∏≠‡∏ô‡∏ô‡∏∞ ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏á‡πà‡∏≤‡∏¢‡πÜ ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡πÄ‡∏•‡∏¢ üëâ http://line.autoconx.app/",
                "FitAI ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÅ‡∏Ñ‡πà AI ‡πÅ‡∏ï‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì! ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡∏Å‡∏±‡∏ô‡πÉ‡∏´‡πâ‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô üòä üëâ http://line.autoconx.app/",
                "‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ ‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏û‡∏¥‡πÄ‡∏®‡∏©‡πÄ‡∏û‡∏µ‡∏¢‡∏ö! (‡πÅ‡∏ï‡πà‡∏à‡∏£‡∏¥‡∏á‡πÜ ‡∏Ñ‡∏∑‡∏≠‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏Å‡πà‡∏≠‡∏ô‡∏Ñ‡∏∏‡∏¢‡πÑ‡∏î‡πâ ü§£) ‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏•‡∏¢ üëâ http://line.autoconx.app/",
                "‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ö Unity X FitAI  ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢! ‡πÑ‡∏°‡πà‡∏™‡∏°‡∏±‡∏Ñ‡∏£... ‡∏Å‡πá‡∏£‡∏≠ Unity X FitAI  ‡∏°‡∏≤‡πÄ‡∏Å‡∏≤‡∏´‡∏±‡∏ß‡πÅ‡∏õ‡πä‡∏ö‡∏ô‡∏∞ ü§îüòÜ üëâ http://line.autoconx.app/",
                "‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏£‡πà‡∏≤‡∏¢‡∏°‡∏ô‡∏ï‡πå! ‡πÅ‡∏Ñ‡πà‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏Å‡πá‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á Unity X FitAI  ‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß üé©‚ú® ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡πÄ‡∏•‡∏¢ üëâ http://line.autoconx.app/",
                "‡∏≠‡∏¢‡∏≤‡∏Å‡πÉ‡∏´‡πâ Unity X FitAI  ‡∏ó‡∏±‡∏Å‡∏ó‡∏≤‡∏¢‡∏î‡πâ‡∏ß‡∏¢‡∏£‡∏≠‡∏¢‡∏¢‡∏¥‡πâ‡∏°? üòä ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏•‡∏¢! üëâ http://line.autoconx.app/",
                "FitAI ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ñ‡∏∏‡∏¢ ‡πÅ‡∏ï‡πà‡∏Ñ‡∏∏‡∏ì‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏∂‡∏¢‡∏±‡∏á? ‡∏ñ‡πâ‡∏≤‡∏û‡∏£‡πâ‡∏≠‡∏° ‡∏Å‡∏î‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÄ‡∏•‡∏¢! üëâ http://line.autoconx.app/",
                "‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å = ‡πÑ‡∏î‡πâ‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ö Unity X FitAI  ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏á‡πà‡∏≤‡∏¢‡∏°‡∏≤‡∏Å ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô 18 ‡∏´‡∏•‡∏±‡∏Å! üòÜ üëâ http://line.autoconx.app/",
                "‡∏Å‡πà‡∏≠‡∏ô‡∏à‡∏∞‡πÉ‡∏´‡πâ Unity X FitAI  ‡∏ä‡πà‡∏ß‡∏¢ ‡∏°‡∏≤‡∏ä‡πà‡∏ß‡∏¢‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏Å‡πà‡∏≠‡∏ô‡∏ô‡∏∞! ‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏•‡∏¢ üëâ http://line.autoconx.app/",
                "‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏Å‡πà‡∏≠‡∏ô ‡∏Ñ‡∏∏‡∏¢‡∏Å‡πà‡∏≠‡∏ô ‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡∏Å‡∏ß‡πà‡∏≤! Unity X FitAI  ‡∏£‡∏≠‡∏≠‡∏¢‡∏π‡πà ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÄ‡∏•‡∏¢ üëâ http://line.autoconx.app/",
                "AI ‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞‡∏Å‡πá‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ï‡∏±‡∏ß ‡∏Ñ‡∏ô‡∏â‡∏•‡∏≤‡∏î‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Å‡πá‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏Å‡πà‡∏≠‡∏ô! üòÜ üëâ http://line.autoconx.app/",
                "‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏Å‡πà‡∏≠‡∏ô‡∏à‡∏∞‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ö Unity X FitAI  ‡∏ô‡∏∞ ‡πÑ‡∏°‡πà‡∏á‡∏±‡πâ‡∏ô AI ‡∏à‡∏∞‡∏á‡∏≠‡∏ô‡πÄ‡∏≠‡∏≤! ü§ñüí¢ ‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏•‡∏¢ üëâ http://line.autoconx.app/",
                "FitAI ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏Ñ‡∏∏‡∏ì ‡πÅ‡∏ï‡πà‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡∏∑‡πà‡∏ô... ‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏Å‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏ñ‡∏≠‡∏∞! üòä ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÄ‡∏•‡∏¢ üëâ http://line.autoconx.app/",
                "‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏≠‡∏Ñ‡∏¥‡∏ß! ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏õ‡∏∏‡πä‡∏ö ‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ö Unity X FitAI  ‡πÑ‡∏î‡πâ‡∏õ‡∏±‡πä‡∏ö ‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏•‡∏¢ üëâ http://line.autoconx.app/",
                "‡πÅ‡∏Ñ‡πà‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏Å‡πá‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏™‡∏π‡πà‡πÇ‡∏•‡∏Å‡∏Ç‡∏≠‡∏á AI! üöÄ ‡∏°‡∏≤‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏Å‡∏±‡∏ô‡πÄ‡∏ñ‡∏≠‡∏∞ üëâ http://line.autoconx.app/",
                "‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏Å‡πà‡∏≠‡∏ô ‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡πà‡∏≠‡∏ô ‡πÅ‡∏ñ‡∏°‡πÑ‡∏î‡πâ‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å AI ‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏Ñ‡∏£! üòè ‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏•‡∏¢ üëâ http://line.autoconx.app/",
            ];

            $line = new LineClient([
                'id' => $this->account->id,
                'accessToken' =>  $this->account->line_channel_access_token,
                'channelID' =>  $this->account->line_channel_id,
                'channelSecret' =>  $this->account->line_channel_secret,
            ]);

            $repyleMessage = $messages[array_rand($messages)];

            $line->pushMessage($UID, $repyleMessage, 'text');
        }
    }

    public function handleReplyByAI($UID, $messageRoom)
    {
        $this->account = $this->accountModel->getAccountByID('128');

        $messages = $this->messageModel->getMessageNotReplyBySendByAndRoomID('User', $messageRoom->id);
        $message = $this->getUserContext($messages);

        // ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö
        $chatGPT = new ChatGPT(['GPTToken' => getenv('GPT_TOKEN')]);
        $repyleMessage = $message['img_url'] == ''
            ? $chatGPT->askChatGPT($messageRoom->id, $message['message'])
            : $chatGPT->askChatGPT($messageRoom->id, $message['message'], $message['img_url']);

        $repyleMessage = $this->filterMessage($repyleMessage);

        $line = new LineClient([
            'id' => $this->account->id,
            'accessToken' =>  $this->account->line_channel_access_token,
            'channelID' =>  $this->account->line_channel_id,
            'channelSecret' =>  $this->account->line_channel_secret,
        ]);

        $this->messageModel->insertMessage([
            'send_by' => 'ADMIN',
            // 'sender_id' => $senderId,
            'message_type' => 'text',
            'message' => $repyleMessage['repyleMessage'],
            // 'is_context' => '1',
            'reply_by' => 'AI'
        ]);

        if ($repyleMessage['json']) {
            $this->menuModel->insertMenu([
                'user_id' => $messageRoom->user_id,
                'content' => $this->cleanUrl($message['img_url']),
                'note' => $repyleMessage['repyleMessage'],
                'cal' => $repyleMessage['json'],
            ]);
        }

        $line->pushMessage($UID, $repyleMessage['repyleMessage'], 'text');

        $this->messageModel->clearUserContext($messageRoom->id);
    }

    // -----------------------------------------------------------------------------
    // Helper
    // -----------------------------------------------------------------------------

    private function cleanUrl($text)
    {
        $urls = explode(',', $text); // ‡πÅ‡∏¢‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏≤‡∏£‡πå‡πÄ‡∏£‡∏¢‡πå‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ ,
        return trim($urls[0]); // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏î‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏≠‡∏≠‡∏Å
    }

    private function filterMessage($inputText)
    {
        // ‡∏•‡∏ö json ‡πÅ‡∏•‡∏∞ ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° 
        $cleanText = preg_replace('/```json|```/', '', $inputText);
        $cleanText = trim($cleanText); // ‡∏•‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô

        // ‡πÉ‡∏ä‡πâ regex ‡πÅ‡∏¢‡∏Å JSON ‡∏ó‡∏µ‡πà‡∏°‡∏µ single quote ‡∏´‡∏£‡∏∑‡∏≠ double quote ‡∏≠‡∏≠‡∏Å‡∏°‡∏≤
        preg_match('/\{.*\}/s', $cleanText, $jsonMatch);

        $json = null;
        if (!empty($jsonMatch)) {
            // ‡πÅ‡∏õ‡∏•‡∏á ' (single quote) ‡πÄ‡∏õ‡πá‡∏ô " (double quote) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ json_decode() ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ
            $jsonString = str_replace("'", '"', $jsonMatch[0]);

            // ‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™ JSON
            $json = json_decode($jsonString, true);
        }

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° "‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡∏°‡∏∑‡πâ‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£" ‡πÅ‡∏•‡∏∞ JSON ‡∏ó‡∏µ‡πà‡∏°‡∏µ key "totalcal" ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if (strpos($cleanText, '‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡∏°‡∏∑‡πâ‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£') !== false && is_array($json) && isset($json['totalcal'])) {
            // ‡πÅ‡∏¢‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏° JSON
            $message = trim(str_replace($jsonMatch[0], '', $cleanText));
        } else {
            // ‡πÄ‡∏Å‡πá‡∏ö‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏•‡∏á‡πÉ‡∏ô $message ‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ $json ‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤
            $message = $cleanText;
            $json = [];
        }

        // // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        // echo "Message: \n$message\n\n";
        // echo "JSON: \n" . json_encode($json, JSON_PRETTY_PRINT) . "\n";

        return [
            'repyleMessage' => $message,
            'json' => $json
        ];
    }

    private function processMessage($input)
    {
        $event = $input->events[0];
        $UID = $event->source->userId;
        // $message = $event->message->text;

        $eventType = $event->message->type;

        switch ($eventType) {

                // ‡πÄ‡∏Ñ‡∏™‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
            case 'text':
                $messageType = 'text';
                $message = $event->message->text;
                break;

                // ‡πÄ‡∏Ñ‡∏™‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏´‡∏£‡∏∑‡∏≠ attachment ‡∏≠‡∏∑‡πà‡∏ô ‡πÜ
            case 'image':

                $messageType = 'image';

                $messageId = $event->message->id;
                $lineAccessToken = $this->account->line_channel_access_token;

                $url = "https://api-data.line.me/v2/bot/message/{$messageId}/content";
                $headers = ["Authorization: Bearer {$lineAccessToken}"];

                // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å Webhook LINE
                $fileContent = fetchFileFromWebhook($url, $headers);

                // ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏°
                $fileName = uniqid('line_') . '.jpg';

                // ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏õ‡∏¢‡∏±‡∏á Spaces
                $message = uploadToSpaces(
                    $fileContent,
                    $fileName,
                    $messageType
                );

                break;

                // ‡πÄ‡∏Ñ‡∏™‡πÄ‡∏™‡∏µ‡∏¢‡∏á
            case 'audio':
                $messageType = 'audio';

                $messageId = $event->message->id;
                $lineAccessToken = $this->account->line_channel_access_token;

                $url = "https://api-data.line.me/v2/bot/message/{$messageId}/content";
                $headers = ["Authorization: Bearer {$lineAccessToken}"];

                // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å Webhook LINE
                $fileContent = fetchFileFromWebhook($url, $headers);

                // ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏°
                $fileName = uniqid('line_') . '.m4a';

                // ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏õ‡∏¢‡∏±‡∏á DigitalOcean Spaces
                $message = uploadToSpaces(
                    $fileContent,
                    $fileName,
                    $messageType,
                );

                break;

            default;
        }

        return [
            'UID' => $UID,
            'type' => $messageType,
            'content' => $message,
        ];
    }

    public function getOrCreateMessageRoom($user)
    {
        $messageRoom = $this->messageRoomModel->getMessageRoomByUserID($user->id);

        if (!$messageRoom) {

            $roomId = $this->messageRoomModel->insertMessageRoom([
                'account_id' => '128',
                'account_name' => 'UNITYxTDEE',
                'user_id' => $user->id,
            ]);

            return $this->messageRoomModel->getMessageRoomByID($roomId);
        }

        return $messageRoom;
    }

    private function getUserContext($messages)
    {
        helper('function');

        $contextText = '';
        $imageUrl = '';

        foreach ($messages as $message) {
            switch ($message->message_type) {
                case 'text':
                    $contextText .= $message->message . ' ';
                    break;
                case 'image':
                    $imageUrl .= $message->message . ',';
                    break;
                case 'audio':
                    $contextText .= convertAudioToText($message->message) . ' ';
                    break;
            }
        }

        return  [
            'message' => $contextText,
            'img_url' => $imageUrl,
        ];
    }

    private function getMockLineWebhookData()
    {
        // TEXT
        //         return json_decode(
        //             '{
        //     "destination": "U4289200c7269074fb51b326a7fa30cdf",
        //     "events": [
        //         {
        //             "type": "message",
        //             "message": {
        //                 "type": "text",
        //                 "id": "547666636904595686",
        //                 "quoteToken": "Uj6pC-mig81A7SiH2_WOH_aZ7XouukaC7gBYPSOfmqPAlLsWRADY1qhQZ5GfBXpTOScqr5kfRVSkli37u4FRV27zUXLaaYQ1EKDnvLzdCkvsmSnqDxIdpcQLXQ0ZZiXIGaOFJicaam65Y2ZW9swVlg",
        //                 "text": "‡∏≠‡∏¢‡∏≤‡∏Å‡∏≠‡πâ‡∏ß‡∏á"
        //             },
        //             "webhookEventId": "01JKT5BSV10VCPYF2AZ6QPPGGJ",
        //             "deliveryContext": {
        //                 "isRedelivery": false
        //             },
        //             "timestamp": 1739266057672,
        //             "source": {
        //                 "type": "user",
        //                 "userId": "U8bf2cbdb6cbbdb8709dc268512abd4a3"
        //             },
        //             "replyToken": "846857eb08e642ae8c019f579fc3e3c2",
        //             "mode": "active"
        //         }
        //     ]
        // }'
        //         );

        // return json_decode(
        //     '{
        //     "destination": "U3cc700ae815f9f7e37ea930b7b66b2c1",
        //     "events": [
        //         {
        //             "type": "message",
        //             "message": {
        //                 "type": "text",
        //                 "id": "545655859934921237",
        //                 "quoteToken": "kKZh_dz7HIZBv-ZjBsMUbeKbaGDCyPs9dNff0zcQkGlgmA9l-1PMsg6PLRQtteMGrufJtv2_fdLC0qRSJX_tbu5LQ3gjs4G3QDQJUWwAYiFcvIRV6fD49a_A16xhHvhKv0NTI68dNW0_YG8CWo6l0g",
        //                 "text": "\u0e04\u0e31\u0e19\u0e19\u0e35\u0e49\u0e2d\u0e30\u0e44\u0e23"
        //             },
        //             "webhookEventId": "01JJPEBZHJCEMYFMJXD2WAPNX6",
        //             "deliveryContext": {
        //                 "isRedelivery": false
        //             },
        //             "timestamp": 1738067541066,
        //             "source": {
        //                 "type": "user",
        //                 "userId": "U793093e057eb0dcdecc34012361d0217"
        //             },
        //             "replyToken": "a2edad6d122747cb96c331832e984be5",
        //             "mode": "active"
        //         }
        //     ]
        // }'
        // );

        // Image
        return json_decode(
            '{
    "destination": "U4289200c7269074fb51b326a7fa30cdf",
    "events": [
        {
            "type": "message",
            "message": {
                "type": "image",
                "id": "548033449140420817",
                "quoteToken": "qm_i9ObtFhv6cZUbqVdZy0611-_bO0_SITfWRfufl1mXlNgs-r1pQrJn5WYjV4mqJtfkgUYh9_-5mB1vXHZQhk40O-J2DhFU6ngUzTAlbi5f45njO2ddl4O2hQMf3oO07Qa1RCVu7ntJvsppKyYTpA",
                "contentProvider": {
                    "type": "line"
                }
            },
            "webhookEventId": "01JM0NW2JEG5863TNFRTYTD968",
            "deliveryContext": {
                "isRedelivery": false
            },
            "timestamp": 1739484694789,
            "source": {
                "type": "user",
                "userId": "U8bf2cbdb6cbbdb8709dc268512abd4a3"
            },
            "replyToken": "204aadd278084e909c08b4f24ada17ad",
            "mode": "active"
        }
    ]
}'
        );

        // Audio
        //         return json_decode(
        //             '{
        //     "destination": "U3cc700ae815f9f7e37ea930b7b66b2c1",
        //     "events": [
        //         {
        //             "type": "message",
        //             "message": {
        //                 "type": "audio",
        //                 "id": "546929768709488706",
        //                 "duration": 7534,
        //                 "contentProvider": {
        //                     "type": "line"
        //                 }
        //             },
        //             "webhookEventId": "01JKD2G7T7HGHNR79HYQYR6E71",
        //             "deliveryContext": {
        //                 "isRedelivery": false
        //             },
        //             "timestamp": 1738826850049,
        //             "source": {
        //                 "type": "user",
        //                 "userId": "U793093e057eb0dcdecc34012361d0217"
        //             },
        //             "replyToken": "bd94a1406d99401e8a6934635ef6e317",
        //             "mode": "active"
        //         }
        //     ]
        // }'
        //         );
    }
}
